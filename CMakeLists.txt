cmake_minimum_required(VERSION 2.8.12)
project(opm-parser CXX)

file(STRINGS dune.module dm)
if ("${dm}" MATCHES "Version: ([a-zA-Z0-9.-]*);")
    string(REGEX MATCHALL "[a-z0-9]+" vers ${CMAKE_MATCH_1})
    list(GET vers 0 opm-parser_VERSION_MAJOR)
    list(GET vers 1 opm-parser_VERSION_MINOR)

    message(STATUS "opm-parser version set to "
                   ${opm-parser_VERSION_MAJOR} "."
                   ${opm-parser_VERSION_MINOR} " in dune.module")
else ()
    message(SEND_ERROR "Could not read version from dune.module")
endif ()

include(CTest)
include(GNUInstallDirs)
include(TestCXXAcceptsFlag)

if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
    message(STATUS "No build type specified - defaulting to 'Debug'.")
    set(CMAKE_BUILD_TYPE "Debug" CACHE STRING "Choose build type." FORCE)
    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY
                 STRINGS "Release" "Debug" "RelWithDebInfo" "MinSizeRel")
endif()

option(BUILD_TESTING "Build test applications by default?"          ON)
option(ENABLE_PYTHON "Enable simple python wappers"                 OFF)
option(USE_RUNPATH   "Embed dependency paths in installed library"  ON)

if (ENABLE_PYTHON AND NOT BUILD_SHARED_LIBS)
    set(BUILD_SHARED_LIBS ON)
    message(WARNING "Building python - forcing shared libraries.")
endif()

#-----------------------------------------------------------------

if (USE_RUNPATH)
    set(CMAKE_INSTALL_RPATH "${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}")
    set(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)
endif ()

if (MSVC)
    add_definitions( "/W3 /D_CRT_SECURE_NO_WARNINGS /wd4996 /wd4244 /wd4267")
    set(CMAKE_CXX_FLAGS "/MP ${CMAKE_CXX_FLAGS}")
else()
    set(CMAKE_CXX_FLAGS "-std=c++11 ${CMAKE_CXX_FLAGS}")
    list(APPEND debug-flags -pedantic -Wall -Wextra -Wformat-nonliteral
                            -Wcast-align -Wpointer-arith -Wmissing-declarations
                            -Wcast-qual -Wshadow -Wwrite-strings
                            -Wchar-subscripts -Wredundant-decls)
    string(REGEX REPLACE ";" " " debug-flags "${debug-flags}")
    set(CMAKE_CXX_FLAGS_DEBUG "${debug-flags} ${CMAKE_CXX_FLAGS_DEBUG}")
endif()

#-----------------------------------------------------------------

find_package(ecl REQUIRED)
find_library(CJSON_LIBRARY NAMES cjson)
if (CJSON_LIBRARY)
    message(STATUS "Found CJSON library: ${CJSON_LIBRARY}")
    add_library(cjson UNKNOWN IMPORTED)
    set_target_properties(cjson PROPERTIES IMPORTED_LOCATION ${CJSON_LIBRARY})
else ()
    add_subdirectory(external/cjson)
endif()

# if building shared libraries, then don't include Boost in them
if (BUILD_SHARED_LIBS)
    set(Boost_USE_STATIC_LIBS OFF)
    set(Boost_USE_STATIC_RUNTIME OFF)
else ()
# if using dynamic boost, the header file must generate a main() function
   set(Boost_USE_STATIC_LIBS ON)
endif ()

find_package(Boost 1.44.0
             COMPONENTS filesystem date_time system unit_test_framework regex
             REQUIRED)

macro( boost_target LIBRARY target )
   list( LENGTH LIBRARY library_list_length )
   if (library_list_length EQUAL 0) 
      set( _library ${LIBRARY} )
   else()
      list( GET ${LIBRARY} 1 _library ) 
   endif()
   get_filename_component( lib_name ${_library} NAME_WE )
   string( SUBSTRING ${lib_name} 3 -1 ${target} )
endmacro()


# make targets for boost
boost_target( ${Boost_SYSTEM_LIBRARY} boost_system_target )
add_library(${boost_system_target} UNKNOWN IMPORTED)
set_target_properties(${boost_system_target} PROPERTIES
    INTERFACE_INCLUDE_DIRECTORIES "${Boost_INCLUDE_DIRS}"
    INTERFACE_SYSTEM_INCLUDE_DIRECTORIES "${Boost_INCLUDE_DIRS}"
    IMPORTED_LOCATION         "${Boost_SYSTEM_LIBRARY}"
    IMPORTED_LOCATION_DEBUG   "${Boost_SYSTEM_LIBRARY_DEBUG}"
    IMPORTED_LOCATION_RELEASE "${Boost_SYSTEM_LIBRARY_RELEASE}"
)

boost_target( ${Boost_FILESYSTEM_LIBRARY} boost_filesystem_target )
add_library(${boost_filesystem_target} UNKNOWN IMPORTED)
set_target_properties(${boost_filesystem_target} PROPERTIES
    INTERFACE_INCLUDE_DIRECTORIES "${Boost_INCLUDE_DIRS}"
    INTERFACE_SYSTEM_INCLUDE_DIRECTORIES "${Boost_INCLUDE_DIRS}"
    INTERFACE_COMPILE_DEFINITIONS BOOST_FILESYSTEM_VERSION=3
    INTERFACE_LINK_LIBRARIES  "${boost_system_target}"
    IMPORTED_LOCATION         "${Boost_FILESYSTEM_LIBRARY}"
    IMPORTED_LOCATION_DEBUG   "${Boost_FILESYSTEM_LIBRARY_DEBUG}"
    IMPORTED_LOCATION_RELEASE "${Boost_FILESYSTEM_LIBRARY_RELEASE}"
)

boost_target( ${Boost_DATE_TIME_LIBRARY} boost_date_time_target )
add_library(${boost_date_time_target} UNKNOWN IMPORTED)
set_target_properties(${boost_date_time_target} PROPERTIES
    INTERFACE_INCLUDE_DIRECTORIES "${Boost_INCLUDE_DIRS}"
    INTERFACE_SYSTEM_INCLUDE_DIRECTORIES "${Boost_INCLUDE_DIRS}"
    IMPORTED_LOCATION       "${Boost_DATE_TIME_LIBRARY}"
    IMPORTED_LOCATION_DEBUG "${Boost_DATE_TIME_LIBRARY_DEBUG}"
    IMPORTED_LOCATION_RELEASE "${Boost_DATE_TIME_LIBRARY_RELEASE}"
)


boost_target( ${Boost_REGEX_LIBRARY} boost_regex_target )
add_library(${boost_regex_target} UNKNOWN IMPORTED)
set_target_properties(${boost_regex_target} PROPERTIES
    INTERFACE_INCLUDE_DIRECTORIES "${Boost_INCLUDE_DIRS}"
    INTERFACE_SYSTEM_INCLUDE_DIRECTORIES "${Boost_INCLUDE_DIRS}"
    INTERFACE_LINK_LIBRARIES  "${boost_system_target}"
    IMPORTED_LOCATION         "${Boost_REGEX_LIBRARY}"
    IMPORTED_LOCATION_DEBUG   "${Boost_REGEX_LIBRARY_DEBUG}"
    IMPORTED_LOCATION_RELEASE "${Boost_REGEX_LIBRARY_RELEASE}"
)

add_library(boost_test UNKNOWN IMPORTED)
set_target_properties(boost_test PROPERTIES
    INTERFACE_INCLUDE_DIRECTORIES "${Boost_INCLUDE_DIRS}"
    INTERFACE_SYSTEM_INCLUDE_DIRECTORIES "${Boost_INCLUDE_DIRS}"
    INTERFACE_LINK_LIBRARIES  "${boost_system_target}"
    IMPORTED_LOCATION         "${Boost_UNIT_TEST_FRAMEWORK_LIBRARY}"
    IMPORTED_LOCATION_DEBUG   "${Boost_UNIT_TEST_FRAMEWORK_LIBRARY_DEBUG}"
    IMPORTED_LOCATION_RELEASE "${Boost_UNIT_TEST_FRAMEWORK_LIBRARY_RELEASE}"
)

if (BUILD_SHARED_LIBS)
    set_target_properties(boost_test PROPERTIES
        INTERFACE_COMPILE_DEFINITIONS BOOST_TEST_DYN_LINK
    )
endif ()

#-----------------------------------------------------------------

include( cmake/Modules/CheckCaseSensitiveFileSystem.cmake )

get_filename_component(OPM_DATA_ROOT ${PROJECT_SOURCE_DIR}/../opm-data
                       ABSOLUTE CACHE)

if (EXISTS ${OPM_DATA_ROOT}/norne/NORNE_ATW2013.DATA)
    set(HAVE_OPM_DATA TRUE)
else()
    set(HAVE_OPM_DATA FALSE)
    message(WARNING "opm-data not found - skipping some integration tests.")
endif ()

# Setup static analysis
include( cmake/Modules/UseStaticAnalysis.cmake )
list(APPEND CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake/Modules)
setup_static_analysis_tools()

add_subdirectory(lib/json)
add_subdirectory(lib/eclipse)
add_subdirectory(applications)

install(FILES dune.module DESTINATION lib/dunecontrol/opm-parser)
install(EXPORT opm-parser-config DESTINATION share/cmake/opm-parser)
export(TARGETS opmjson opmparser FILE opm-parserConfig.cmake)
export(PACKAGE opm-parser)
